cmake_minimum_required(VERSION 2.6)
project(eigen_boost_test)

# Eigen
#SET( CMAKE_MODULE_PATH "${EIGEN3_INCLUDE_DIR}/cmake" )
FIND_PACKAGE(Eigen3 3.0.0 REQUIRED)
MESSAGE("Found Eigen ${EIGEN3_VERSION} ${Eigen3_VERSION} in ${EIGEN3_INCLUDE_DIR}")
INCLUDE_DIRECTORIES( ${EIGEN3_INCLUDE_DIR} )

# boost
SET(Boost_USE_STATIC_LIBS        ON)
SET(Boost_USE_MULTITHREADED      ON)
IF(MSVC)
	SET(Boost_USE_STATIC_RUNTIME     OFF)
ELSE(MSVC)
	IF(MSYS)
		SET(Boost_USE_STATIC_RUNTIME     OFF)
	ELSE(MSYS)
		SET(Boost_USE_STATIC_RUNTIME     ON)
	ENDIF(MSYS)
ENDIF(MSVC)
#SET(Boost_DEBUG TRUE)
FIND_PACKAGE( Boost 1.53.0 REQUIRED date_time thread
	system chrono serialization filesystem locale)
INCLUDE_DIRECTORIES(${Boost_INCLUDE_DIRS})
IF(WIN32 AND CMAKE_COMPILER_IS_GNUCC)
	SET( CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DBOOST_THREAD_USE_LIB" )
	SET( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DBOOST_THREAD_USE_LIB" )
ENDIF(WIN32 AND CMAKE_COMPILER_IS_GNUCC)
IF(UNIX AND NOT APPLE)
	# Workaround for apparent bug in FindBoost (librt is not added at the end):
	message("Boost_LIBRARIES = ${Boost_LIBRARIES}")
	SET(Boost_LIBRARIES "${Boost_LIBRARIES};rt")
ENDIF(UNIX AND NOT APPLE)

# OpenMP
FIND_PACKAGE( OpenMP )
IF(OPENMP_FOUND)
	SET( CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}" )
	SET( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}" )
	ADD_DEFINITIONS(-DUSE_OPENMP)
ENDIF(OPENMP_FOUND)

IF(MSVC)
	SET( CMAKE_EXE_LINKER_FLAGS_RELEASE "${CMAKE_EXE_LINKER_FLAGS_RELEASE} /INCREMENTAL:NO /NODEFAULTLIB:libcmt.lib" )
	SET( CMAKE_EXE_LINKER_FLAGS_DEBUG "${CMAKE_EXE_LINKER_FLAGS_DEBUG} /INCREMENTAL:NO /NODEFAULTLIB:msvcrt.lib /NODEFAULTLIB:libcmt.lib" )

ENDIF(MSVC)

IF(CMAKE_COMPILER_IS_GNUCC)
	SET( CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -msse2 -mfpmath=sse ${EXTRA_COMPILER_OPTIONS}" )
	SET( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -msse2 -mfpmath=sse -fpermissive ${EXTRA_COMPILER_OPTIONS}" )

	IF(R3D_USE_STATIC_LIBGCC)
		SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -static-libgcc -static-libstdc++")
	ENDIF(R3D_USE_STATIC_LIBGCC)
	SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -msse2 ${EXTRA_COMPILER_OPTIONS}")

	# Enable Large address aware in 32 bit builds
	IF(${IS_64BITS} EQUAL 0 AND WIN32)
		SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -Wl,--large-address-aware")
	ENDIF(${IS_64BITS} EQUAL 0 AND WIN32)
	IF(WIN32)
		# Add some security flags: Enable ASLR and DEP
		SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -Wl,--dynamicbase -Wl,--nxcompat")
	ENDIF(WIN32)

	# Strip everything in Release builds
	SET(CMAKE_EXE_LINKER_FLAGS_RELEASE "${CMAKE_EXE_LINKER_FLAGS_RELEASE} -Wl,--strip-all")
ENDIF(CMAKE_COMPILER_IS_GNUCC)

SET(ALL_SRC ${ALL_SRC} eigen_boost.cpp )

SET(ALL_HEADERS ${ALL_HEADERS} )

ADD_EXECUTABLE(eigen_boost_test ${ALL_SRC} ${ALL_HEADERS})

TARGET_LINK_LIBRARIES(eigen_boost_test ${Boost_LIBRARIES})
